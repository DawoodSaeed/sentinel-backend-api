// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  password       String          @db.VarChar(255)
  parent_id      Int? // Optional to allow root users without a parent
  parent         User?           @relation("UserToParent", fields: [parent_id], references: [id])
  children       User[]          @relation("UserToParent") // Inverse relation
  role_id        Int
  role           Role            @relation(fields: [role_id], references: [id])
  history        User_History[]
  is_initailizer Boolean         @default(false)
  referedBy      Case_Timeline[] @relation("ReferredTo")
  referedTo      Case_Timeline[] @relation("ReferredBy")
  // collabs   Collab[]        // Associated collaborations

  moderatorCollab   Collab[] @relation("moderatoCollab")
  participantCollab Collab[] @relation("CollabUsers")
  Case              Case[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255) // Role name, e.g., "Moderator", "Cheif Exper", "Expert"
  users User[] @relation // Inverse relation from User table
}

// Patch request can be made by the required user to edit its content 
// according to its liking...

model Case {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(255)
  category     CaseCategory
  level        Level
  status       Int
  timelines    Case_Timeline[]
  created_at   DateTime
  User_History User_History[]
  Collab       Collab[]

  moderator    User @relation(fields: [moderator_id], references: [id])
  moderator_id Int
}

// Status == 1 => The case has been initiated 
// Status == 2 => The cases has been send to the moderator.
// The message will be received by the moderator and the expert
// status == 3 Case has been send to the moderator.
// Status == -1 Case has been disaproved.
// Status == 0 Case has been done.

// expert == cheif expert (miderator)
// modertaor == moderator
// modertaor  === expert (assignment)
model Case_Timeline {
  id           Int      @id @default(autoincrement())
  case_id      Int
  status       Int
  date         DateTime
  attach_files String[] // Array of file URLs
  deadline     DateTime
  referred_by  Int?
  referred_to  Int? // Foreign key if referring to another user
  collab_id    Int // Foreign key to Collab
  remarks      String

  collab         Collab @relation(fields: [collab_id], references: [id], onDelete: Cascade)
  case           Case   @relation(fields: [case_id], references: [id], onDelete: Cascade)
  referredToUser User?  @relation("ReferredTo", fields: [referred_to], references: [id], onDelete: SetNull)
  referredByUser User?  @relation("ReferredBy", fields: [referred_by], references: [id], onDelete: SetNull)
}

model Collab {
  id Int @id @default(autoincrement())

  // which case I am related to .
  case_id Int
  case    Case @relation(fields: [case_id], references: [id], onDelete: Cascade) // Ensure the task exists

  moderator     Int
  moderatorUser User? @relation("moderatoCollab", fields: [moderator], references: [id]) // Ensure the moderator is a valid user

  users    User[]    @relation("CollabUsers") // Many-to-many relation for all participants
  messages Message[] // Messages within the collaboration

  Case_Timeline Case_Timeline[]
}

model Message {
  id          Int      @id @default(autoincrement())
  message     String
  collab_id   Int
  user_id     Int
  attach_file String
  Collab      Collab?  @relation(fields: [collabId], references: [id])
  collabId    Int?
  created_at  DateTime
}

model User_History {
  id         Int      @id @default(autoincrement())
  case_id    Int
  status     Int
  start_date DateTime
  end_date   DateTime
  deadline   DateTime
  user_id    Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  case Case @relation(fields: [case_id], references: [id], onDelete: Cascade)
}

enum Level {
  A
  B
  C
}

enum CaseCategory {
  Politicians
  Political_Activists
  Social_Workers
  Social_Media_User
  Foreigner
  Others
}
